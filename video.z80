; Screen Location = 010T TSSS LLLC CCCC
; TT    = Which Third = 0,1 or 2
; SSS   = Which Pixeline = 0 -> 7
; LLL   = Character Line = 0 -> 7
; CCCCC = Line Column 0 -> 31

; https://wiki.speccy.org/cursos/ensamblador/gfx2_direccionamiento
; Gets the memory location corresponding to the scanline.
; The next to the one indicated.
;     010T TSSS LLLC CCCC
; Input:  HL -> current pixelline.
; Output: HL -> pixelline next.
; Alters the value of the AF and HL registers.
;------------------------------------------------------------------
NextPixelLine:
    inc h
    ld a,h
;   h =  010TTSSS
    and %00000111   ; 7 ; this is just to set the flags....
    ret nz

    ld a,l
;   l =     LLLCCCCC
    add a, %00100000    ; $20 ; Adding 1 to the Character Line
    ld l, a
    ret c

    ld a, h
;   h =  010TTSSS
    sub %00001000    ; 8 ; Subtracting 1 from the Third
    ld h, a
    ret

; -----------------------------------------------------------------
; https://wiki.speccy.org/cursos/ensamblador/gfx2_direccionamiento
; Gets the memory location corresponding to the scanline.
; The following is the first time this has been done; prior 
; to that indicated.
;     010T TSSS LLLC CCCC
; Input:  HL -> current scanline.	    
; Output: HL -> previous scanline.
; Alters the value of the AF, BC and HL registers.
;------------------------------------------------------------------
PreviousPixelLine:
    ld a, h
    dec h
;   h =  010TTSSS
    and %00000111
    ret nz

    ld a, l
;   l =  LLLCCCCC
    sub %00100000
    ld l, a
    ret c

    ld a, h
;   h =    010TTSSS
    add a, %00001000
    ld h, a
    ret

PrintBall:
    ld b, $00
    ld a, (ballRotation)
    ld c, a
    cp $00
    ld a, $00
    jp p, printBall_right

printBall_left:
    ld hl, ballLeft
    sub c
    add a, a
    ld c, a
    sbc hl, bc
    jr printBall_continue

printBall_right:
    ld hl, ballRight
    add a, c
    add a, a
    ld c, a
    add hl, bc

printBall_continue:
    ex de, hl
    ld hl, (ballPos)
    ld (hl), ZERO
    inc l
    ld (hl), ZERO
    dec l
    call NextPixelLine

    ld b, $04
printBall_loop:
    ld a, (de)
    ld (hl), a
    inc de
    inc l
    ld a, (de)
    ld (hl), a
    dec de
    dec l
    call NextPixelLine
    djnz printBall_loop

    ld (hl), ZERO
    inc l
    ld (hl), ZERO
    ret




;------------------------------------------------------------------
; Gets the memory location corresponding to the start of the pixelline.
; The following is the first time this has been done; prior 
; to that indicated.
;     010T TSSS LLLC CCCC
; Input:  B ->  pixelline required.	    
; Output: HL -> address of that line.
; Alters the value of the AF, BC and HL registers.
;------------------------------------------------------------------
PixelLineAddressCalculator:
    ; To work out the Screen Third
    ld a, b
;   h =  010TTSSS
    ; mask of top 2 bits these represent the thirds
    and %11000000
    ; shift right 3 bits
    rra
    rra
    rra
    ; store in h of hl
    ld h,a

    ; Work Out the Screen Character PixelLine in that Third
    ld a, b
    ; mask off bottom 3 bits, which represent the pixel line in the character line
    and %00000111
    ; add it to h
    add a, h
    ; or h with $40, which represents the base address of the scree = $4000
    or %01000000
    ; store h of hl
    ld h, a

    ; Work Out the Screen Character Line in that Third
    ld a, b
;   l =  LLLCCCCC
    ; mask off middle 3 bits which represnt the character line of the screen third 
    and %00111000
    ; shift left 2 bits to put into correct location
    rla
    rla
    ; store result into l of hl
    ld l, a
    ret

;-------------------------------------------------------------------- 
; Clean screen, ink 7, background 0. ; Alters the value of the AF, BC, DE and HL registers. 
;--------------------------------------------------------------------
Cls:
; Clean the pixels on the screen
    ld hl, $4000
    ld (hl), $00
    ld de, $4001
    ld bc, $17FF
    ldir ;----- this would be like this
    ;   repeat: ld a, (hl)
    ;           ld (de),a
    ;           inc hl
    ;           inc de
    ;           dec bc
    ;           jrnz repeat 
    ;----------------------------------

; Sets the ink to white and the background to black
    ;ld hl, $5800
    inc hl
    ld (hl), $07
    ;ld de, $5801
    inc de
    ld bc, $2FF
    ldir ;----- this would be like this
    ;   repeat: ld a, (hl)
    ;           ld (de),a
    ;           inc hl
    ;           inc de
    ;           dec bc
    ;           jrnz repeat 
    ;----------------------------------

    ret



PrintBorder:
    ld hl, $4100
    ld de, $56e0
    ld b, $20

    ld a, FILL
printBorder_loop:
    ld (hl), a
    ld (de), a
    inc l
    inc e
    djnz printBorder_loop
    ret

;-------------------------------------------------------------------- 
; Paints the centre line. 
; Alters the value of the AF, B, C and HL registers. 
;--------------------------------------------------------------------
PrintLine:
    ld b, $18
    ld hl, $4010

printline_loop:
    ld (hl), ZERO
    inc h
    ;push bc

    ; backup b register into c
    ld c,b

    ; paint the visible part of the line
    ld b, $06
printline_loop2:
    ld (hl), LHDOT
    inc h
    djnz printline_loop2
    ;pop bc

    ; restores b register from c
    ld b,c

    ld (hl), ZERO
    call NextPixelLine
    djnz printline_loop
    ret

ReprintLine:
    ld hl, (ballPos)
    ld a, l
    and %11100000           ; $E0
    or  %00010000           ; $10
    ld l, a

    ld b, $06
reprintLine_loop:
    ld a, h
    and %00000111           ; $07
    cp $01
    ; if the carry is set, this means less than
    jr c, reprintLine_00   ; < $01
    cp $07
    ; jmp if equal
    jr z, reprintLine_00
    ld c, LHDOT
    jr reprintLine_loopCont

reprintLine_00:
    ld c, ZERO

reprintLine_loopCont:
    ld a, (hl)
    or c
    ld (hl), a
    call NextPixelLine
    djnz reprintLine_loop
    ret

;-------------------------------------------------------------------- 
; Paint the paddle. 
; Input: HL -> paddle position.
; 
; Alters the value of the B and HL registers. 
;--------------------------------------------------------------------
PrintPaddle:
    ld (hl), ZERO
    call NextPixelLine

    ld b, $16
printPaddle_loop:
    ld (hl), PADDLE
    call NextPixelLine
    djnz printPaddle_loop
    ld (hl), ZERO
    ret

;--------------------------------------------------------------------
; Evaluates whether the lower limit has been reached.
; Input:  A  -> Upper limit (TTLLLLSSS).
;         HL -> Current position (010TTSSS LLLCCCCCCC).
; Output: Z  =  Reached.
;         NZ =  Not reached.
;
; Alters the value of the AF and BC registers.
;--------------------------------------------------------------------
CheckBottom:
    call checkVerticalLimit
    ret c

checkBottom_bottom:
    xor a
    ret

;--------------------------------------------------------------------
; Evaluates whether the upper limit has been reached.
; Input:  A  -> Upper margin (TTLLLLSSS).
;         HL -> Current position (010TTSSS LLLCCCCCCC).
; Output: Z  =  Reached.
;         NZ =  Not reached.
;
; Alters the value of the AF and BC registers.
;--------------------------------------------------------------------
CheckTop:
    call checkVerticalLimit
    ret

;--------------------------------------------------------------------
; Evaluates whether the vertical limit has been reached.
; Input: A  -> Vertical limit (TTLLLLSSS).
;        HL -> Current position (010TTSSS LLLCCCCCCC).
;
; Alters the value of the AF and BC registers.
;--------------------------------------------------------------------
checkVerticalLimit:
    ld b, a
    call AddressToPixelLineCalculator
    cp b
    ret


;------------------------------------------------------------------
; Gets the pixel line location that corresponding to the memory address.
; The following is the first time this has been done; prior 
; to that indicated.
;     010T TSSS LLLC CCCC
; Input:  HL -> address of that line.	    
; Output: A -> pixelline for the address.
; Alters the value of the A, and E.
;------------------------------------------------------------------
AddressToPixelLineCalculator:
    ld a, h
    and %00011000   ; preserving the Third xxxTTxxx
    rlca
    rlca
    rlca
    ld e, a

    ld a, h
    and %00000111   ; preserving the pixel lines
    or e
    ld e, a         ; E = TTxxxSSS

    ld a, l
    and %11100000   ; Preserving the character line number
    rrca
    rrca
    or e            ; A = TTLLLSSS
    ret

;--------------------------------------------------------------------
; Gets the corresponding sprite to paint on the marker.
; Input:  A  -> score.
; Output: HL -> address of the sprite to be painted.
; Alters the value of the AF, BC and HL registers.
;--------------------------------------------------------------------
GetPointSprite:
    ld hl, Zero
    ld bc, $04
    inc a

getPointsSprite_loop:
    dec a
    ret z
    add hl, bc
    jr getPointsSprite_loop


;--------------------------------------------------------------------
; Paint the scoreboard.
; Each number is 1 byte wide by 16 bytes high.
; Alters the value of the AF, BC, DE and HL registers.
;--------------------------------------------------------------------
PrintPoints:
    ld a, (p1points)
    call GetPointSprite
    push hl
    ; 1st Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P1
    call printPoint_print
    pop hl
    inc hl
    inc hl
    ; 2nd Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P1
    inc l
    call printPoint_print

    ld a, (p2points)
    call GetPointSprite
    push hl
    ; 1st Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P2
    call printPoint_print
    pop hl
    inc hl
    inc hl
    ; 2nd Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P2
    inc l

printPoint_print:
    ld b, $10
    push de
    push hl

printPoint_printLoop:
    ld a, (de)
    ld (hl), a
    inc de
    call NextPixelLine
    djnz printPoint_printLoop
    pop hl
    pop de
    ret

;--------------------------------------------------------------------
; Paint the scoreboard.
; Each number is 1 byte wide by 16 bytes high.
; Alters the value of the AF, BC, DE and HL registers.
;--------------------------------------------------------------------
RePrintPoints:
    ld a, (p1points)
    call GetPointSprite
    push hl
    ; 1st Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P1
    call reprintPoint_print
    pop hl
    inc hl
    inc hl
    ; 2nd Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P1
    inc l
    call reprintPoint_print

    ld a, (p2points)
    call GetPointSprite
    push hl
    ; 1st Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P2
    call reprintPoint_print
    pop hl
    inc hl
    inc hl
    ; 2nd Digit
    ld e, (hl)
    inc hl
    ld d, (hl)
    ld hl, POINTS_P2
    inc l

reprintPoint_print:
    ld b, $10
    push de
    push hl

reprintPoint_printLoop:
    ld a, (de)
    or (hl)
    ld (hl), a
    inc de
    call NextPixelLine
    djnz reprintPoint_printLoop
    pop hl
    pop de
    ret
